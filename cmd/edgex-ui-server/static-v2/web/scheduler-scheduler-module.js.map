{"version":3,"sources":["./src/app/scheduler/scheduler.component.ts","./src/app/scheduler/scheduler.component.html","./src/app/services/scheduler.service.ts","./src/app/scheduler/interval/add-interval/add-interval.component.ts","./src/app/scheduler/interval/add-interval/add-interval.component.html","./src/app/scheduler/intervalaction/edit-interval-action/edit-interval-action.component.ts","./src/app/scheduler/intervalaction/edit-interval-action/edit-interval-action.component.html","./src/app/scheduler/intervalaction/interval-action-center/interval-action-center.component.ts","./src/app/scheduler/intervalaction/interval-action-center/interval-action-center.component.html","./src/app/scheduler/intervalaction/interval-action-list/interval-action-list.component.ts","./src/app/scheduler/intervalaction/interval-action-list/interval-action-list.component.html","./src/app/scheduler/interval/edit-interval/edit-interval.component.ts","./src/app/scheduler/interval/edit-interval/edit-interval.component.html","./src/app/scheduler/interval/interval-center/interval-center.component.ts","./src/app/scheduler/interval/interval-center/interval-center.component.html","./src/app/scheduler/interval/interval-combo-list/interval-combo-list.component.ts","./src/app/scheduler/interval/interval-combo-list/interval-combo-list.component.html","./src/app/scheduler/scheduler.module.ts","./src/app/scheduler/scheduler-routing.module.ts","./src/app/scheduler/interval/interval-list/interval-list.component.ts","./src/app/scheduler/interval/interval-list/interval-list.component.html","./src/app/scheduler/intervalaction/add-interval-action/add-interval-action.component.ts","./src/app/scheduler/intervalaction/add-interval-action/add-interval-action.component.html"],"names":[],"mappings":"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","file":"scheduler-scheduler-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-scheduler',\n  templateUrl: './scheduler.component.html',\n  styleUrls: ['./scheduler.component.css']\n})\nexport class SchedulerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n      <ul class=\"nav nav-tabs card-header-tabs font-weight-bold\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link \" routerLink=\"./interval-center\" routerLinkActive=\"active\">Interval</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink=\"./interval-action-center\" routerLinkActive=\"active\">IntervalAction</a>\n          </li>\n      </ul>\n    </div>\n    <div class=\"card-body\">\n        <router-outlet></router-outlet>\n    </div>\n</div>","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { BaseWithIdResponse, BaseResponse } from '../contracts/v2/common/base-response';\nimport { IntervalRequest } from '../contracts/v2/requests/interval-request';\nimport { Interval } from '../contracts/v2/interval';\nimport { IntervalResponse, MultiIntervalResponse } from '../contracts/v2/responses/interval-response';\nimport { IntervalAction } from '../contracts/v2/interval-action';\nimport { IntervalActionRequest } from '../contracts/v2/requests/interval-action-request';\nimport { IntervalActionResponse, MultiIntervalActionResponse } from '../contracts/v2/responses/interval-action-response';\n\nimport { ErrorService } from './error.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchedulerService {\n\n  endpoint: string = \"/scheduler\";\n  version: string = \"/api/v2\";\n  urlPrefix: string = `${this.endpoint}${this.version}`;\n\n  configUrl: string = \"/config\";\n\n  intervalListUrl: string = `${this.urlPrefix}/interval/all` ;\n  addOneIntervalUrl: string = `${this.urlPrefix}/interval`;\n  updateOneIntervalUrl: string = `${this.urlPrefix}/interval`;\n  findOneIntervalByNameUrl: string = `${this.urlPrefix}/interval/name/`;\n  deleteOneIntervalByNameUrl: string = `${this.urlPrefix}/interval/name/`;\n\n  intervalActionListUrl: string = `${this.urlPrefix}/intervalaction/all`;\n  addOneIntervalActionUrl: string = `${this.urlPrefix}/intervalaction`;\n  updateOneIntervaActionlUrl: string = `${this.urlPrefix}/intervalaction`;\n  findOneIntervalActionByNameUrl: string = `${this.urlPrefix}/intervalaction/name/`;\n  deleteOneIntervalActionByNameUrl: string = `${this.urlPrefix}/intervalaction/name/`;\n\n  httpPostOrPutJSONOptions = {\n    headers: new HttpHeaders({\n      'Content-type': 'application/json',\n      'Authorization': ''\n    })\n  };\n\n  constructor(private http: HttpClient, private errorSvc: ErrorService) { }\n\n  getConfig(): Observable<any> {\n    let url = `${this.urlPrefix}${this.configUrl}`;\n    return this.http.get(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  //interval resource\n  findAllIntervalsPagination(offset: number, limit: number): Observable<MultiIntervalResponse> {\n    let url = `${this.intervalListUrl}?offset=${offset}&limit=${limit}`;\n    return this.http.get<MultiIntervalResponse>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  addInterval(interval: Interval): Observable<BaseWithIdResponse[]> {\n    let url = `${this.addOneIntervalUrl}`;\n    let data: IntervalRequest[] = [{\n      apiVersion: 'v2',\n      interval: interval\n    }];\n    return this.http.post<BaseWithIdResponse[]>(url,JSON.stringify(data),this.httpPostOrPutJSONOptions).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  updateInterval(interval: Interval): Observable<BaseResponse[]> {\n    let url = `${this.updateOneIntervalUrl}`;\n    let data: IntervalRequest[] = [{\n      apiVersion: 'v2',\n      interval: interval\n    }];\n    return this.http.patch<BaseResponse[]>(url,JSON.stringify(data),this.httpPostOrPutJSONOptions).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  findIntervalByName(name: string): Observable<IntervalResponse> {\n    let url = `${this.findOneIntervalByNameUrl}${name}`;\n    return this.http.get<IntervalResponse>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  deleteIntervalByName(name: string): Observable<BaseResponse[]> {\n    let url = `${this.deleteOneIntervalByNameUrl}${name}`;\n    return this.http.delete<BaseResponse[]>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  //interval action resource\n\n  findAllIntervalActionsPagination(offset: number, limit: number): Observable<MultiIntervalActionResponse> {\n    let url = `${this.intervalActionListUrl}?offset=${offset}&limit=${limit}`;\n    return this.http.get<MultiIntervalActionResponse>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  addIntervalAction(intervalAction: IntervalAction): Observable<BaseWithIdResponse[]> {\n    let url = `${this.addOneIntervalActionUrl}`;\n    let data: IntervalActionRequest[] = [{\n      apiVersion: 'v2',\n      action: intervalAction\n    }];\n    return this.http.post<BaseWithIdResponse[]>(url,JSON.stringify(data),this.httpPostOrPutJSONOptions).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  updateIntervalAction(intervalAction: IntervalAction): Observable<BaseResponse[]> {\n    let url = `${this.updateOneIntervaActionlUrl}`;\n    let data: IntervalActionRequest[] = [{\n      apiVersion: 'v2',\n      action: intervalAction\n    }];\n    return this.http.patch<BaseResponse[]>(url,JSON.stringify(data),this.httpPostOrPutJSONOptions).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  findIntervalActionByName(name: string): Observable<IntervalActionResponse> {\n    let url = `${this.findOneIntervalActionByNameUrl}${name}`;\n    return this.http.get<IntervalActionResponse>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n  deleteIntervalActionByName(name: string): Observable<BaseResponse[]> {\n    let url = `${this.deleteOneIntervalActionByNameUrl}${name}`;\n    return this.http.delete<BaseResponse[]>(url).pipe(\n      catchError(error => this.errorSvc.handleError(error))\n    )\n  }\n\n}\n","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Interval } from '../../../contracts/v2/interval';\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { MessageService } from '../../../message/message.service';\nimport { ErrorService } from '../../../services/error.service';\nimport { BaseWithIdResponse } from '../../../contracts/v2/common/base-response';\nimport flatpickr from 'flatpickr';\n\n@Component({\n  selector: 'app-add-interval',\n  templateUrl: './add-interval.component.html',\n  styleUrls: ['./add-interval.component.css']\n})\nexport class AddIntervalComponent implements OnInit, OnDestroy {\n\n  interval: Interval = {\n    apiVersion: \"v2\",\n    id: \"\",\n    name: \"\",\n    start: \"\",\n    end: \"\",\n    interval: \"\",\n    runOnce: false\n  };\n  calendarStart: any;\n  calendarEnd: any;\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private errSvc: ErrorService) { }\n\n  ngOnInit(): void {\n    $('[data-toggle=\"popover\"]').popover({\n      trigger: 'hover'\n    });\n    this.initDatePickr();\n  }\n\n  initDatePickr() {\n    this.calendarStart = flatpickr(\"input[name='intervalStart']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false\n    });\n    this.calendarEnd = flatpickr(\"input[name='intervalEnd']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false\n    });\n  }\n\n  submit() {\n    this.schedulerSvc.addInterval(this.interval).subscribe((data: BaseWithIdResponse[]) => {\n      if (this.errSvc.handleErrorForV2API(data)){\n        return\n      }\n      this.msgSvc.success(\"create new interval\", `name: ${this.interval.name}`);\n      this.router.navigate(['../interval-list'], { relativeTo: this.route });\n    });\n  }\n\n  ngOnDestroy(): void {\n    $('[data-toggle=\"popover\"]').popover('dispose');\n  }\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<div class=\"card\">\n    <div class=\"card-header\">\n        <i class=\"fa fa-plus text-danger\"></i>\n        Add Interval\n        <button class=\"btn btn-sm btn-success float-right\" (click)=\"submit()\" [disabled]=\"!interval.name || !interval.interval\">Submit</button>\n    </div>\n    <div class=\"card-body\">\n        <form>\n            <div class=\"form-group row has-validation\">\n                <label for=\"intervalName\" class=\"col-md-2 col-form-label\" required>Name</label>\n                <div class=\"col-md-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"validationIntervalName\" [class.is-invalid]=\"!interval.name\" [class.is-valid]=\"interval.name\" name=\"intervalName\" [(ngModel)]=\"interval.name\" required>\n                    <div id=\"validationIntervalNameFeedback\" class=\"invalid-feedback\">\n                        <small>the interval name can't be empty!</small> \n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalStart\" class=\"col-md-2 col-form-label\">Start</label>\n                <div class=\"col-md-10\">\n                    <div class=\"input-group mb-3\">\n                        <div class=\"input-group-prepend\">\n                            <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                        </div>\n                        <input type=\"text\" class=\"form-control\" name=\"intervalStart\" [(ngModel)]=\"interval.start\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalEnd\" class=\"col-md-2 col-form-label\">End</label>\n                <div class=\"col-md-10\">\n                    <div class=\"input-group mb-3\">\n                        <div class=\"input-group-prepend\">\n                            <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                        </div>\n                        <input type=\"text\" class=\"form-control\" name=\"intervalEnd\" [(ngModel)]=\"interval.end\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalInterval\" class=\"col-md-2 col-form-label\">\n                    <span class=\"mr-2\">Interval</span> \n                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"true\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                    data-content='Interval indicates how often the specific resource needs to be polled. It represents as a duration string. The format of this field is to be an unsigned integer followed by a unit which may be \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours. Eg, \"100ms\", \"24h\"'></span>\n                </label>\n                <div class=\"col-md-10\">\n                    <input type=\"text\" class=\"form-control\" name=\"intervalInterval\" [class.is-invalid]=\"!interval.interval\" [class.is-valid]=\"interval.interval\" [(ngModel)]=\"interval.interval\" required>\n                    <div id=\"validationIntervalIntervalFeedback\" class=\"invalid-feedback\">\n                        <small>the interval interval can't be empty!</small> \n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalRunOnce\" class=\"col-md-2 col-form-label\">RunOnce</label>\n                <div class=\"col-md-10\">\n                    <select class=\"custom-select\" name=\"intervalRunOnce\" [(ngModel)]=\"interval.runOnce\">\n                        <option [ngValue]=\"false\">false</option>\n                        <option [ngValue]=\"true\">true</option>\n                    </select>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { MessageService } from '../../../message/message.service';\nimport { ErrorService } from '../../../services/error.service';\nimport { Address } from '../../../contracts/v2/address';\n\nimport { IntervalAction } from '../../../contracts/v2/interval-action';\nimport { Interval } from '../../../contracts/v2/interval';\nimport { IntervalActionResponse } from '../../../contracts/v2/responses/interval-action-response';\nimport { IntervalResponse } from '../../../contracts/v2/responses/interval-response';\nimport { CoreCommand } from '../../../contracts/v2/core-command';\n\nimport flatpickr from 'flatpickr';\n\n@Component({\n  selector: 'app-edit-interval-action',\n  templateUrl: './edit-interval-action.component.html',\n  styleUrls: ['./edit-interval-action.component.css']\n})\nexport class EditIntervalActionComponent implements OnInit {\n\n  addr_type_REST: string = 'REST';\n  addr_type_MQTT: string = 'MQTT';\n  addr_type_EMAIL: string = 'EMAIL';\n\n  template_type_coredata = 'coredata';\n  template_type_command = 'command';\n  template_type_custom = 'custom';\n\n  intervalActionOlder: IntervalAction;\n  intervalAction: IntervalAction;\n  addressEmailRecipients: string = \"\";\n  selectedIntervalDefault?: Interval;\n  templateSelected: string = \"custom\";\n  coredataRequestParameter = '';\n  calendarStart: any;\n\n  coredataSvcAvailableAPI: string[] = [\n    \"/api/v2/event/age/\"\n  ];\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private errSvc: ErrorService) {\n      this.intervalAction = {} as IntervalAction;\n      this.intervalActionOlder = {} as IntervalAction;\n      this.intervalAction.address = {} as Address;\n  }\n\n  ngOnInit(): void {\n    this.renderPopoverComponent();\n    this.route.queryParams.subscribe(params => {\n      if (params['intervalActionName']) {\n        this.schedulerSvc.findIntervalActionByName(params['intervalActionName']).subscribe((resp: IntervalActionResponse)=>{\n          this.intervalAction = JSON.parse(JSON.stringify(resp.action));\n          this.intervalActionOlder = JSON.parse(JSON.stringify(resp.action));\n          // this.intervalActionOlder = resp.action;\n          this.addressEmailRecipients  = this.intervalAction.address.recipients?this.intervalAction.address.recipients.toString():'';\n          this.findDefaultSelectedIntervalByName(this.intervalAction.intervalName);\n          setTimeout(() => {\n            this.renderPopoverComponent();\n            this.initDatePickr();\n          }, 300);\n        });\n      }\n    })\n  }\n\n  initDatePickr() {\n    let that = this;\n    this.calendarStart = flatpickr(\"input[name='coredataRequestParameter']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false,\n      onChange: function(selectedDates, dateStr, instance) {\n          that.intervalAction.address.path = that.coredataSvcAvailableAPI[0] + dateStr;\n      },\n    });\n  }\n\n  setActionDefaultProperties() {\n   switch (this.intervalAction.address.type) {\n      case this.addr_type_REST:\n        this.intervalAction.address.httpMethod = 'GET';\n        break\n      case this.addr_type_MQTT:\n        this.intervalAction.address.retained = false;\n        this.intervalAction.address.autoReconnect = true;\n        break\n      default:\n   }\n  }\n\n  findDefaultSelectedIntervalByName(name: string) {\n    this.schedulerSvc.findIntervalByName(name).subscribe((resp: IntervalResponse)=>{\n      this.selectedIntervalDefault = resp.interval;\n    });\n  }\n\n  renderPopoverComponent() {\n    $('[data-toggle=\"popover\"]').popover({\n      trigger: 'hover'\n    });\n  }\n\n  renderCoredataDefaultTemplate() {\n    this.intervalAction.address.httpMethod = 'DELETE';\n    this.intervalAction.address.host = 'edgex-core-data';\n    this.intervalAction.address.port = 48080;\n    this.intervalAction.address.path = this.coredataSvcAvailableAPI[0];\n    setTimeout(() => {\n      this.renderPopoverComponent();\n      this.initDatePickr();\n    }, 300);\n  }\n\n  templateToggle(template: string) {\n    this.intervalAction = JSON.parse(JSON.stringify(this.intervalActionOlder));\n    this.intervalAction.address.type = this.addr_type_REST;\n    this.templateSelected = template;\n    switch (this.templateSelected) {\n      case this.template_type_coredata:\n        this.renderCoredataDefaultTemplate();\n        break;\n      case this.template_type_command:\n        this.intervalAction.address.path = '';\n        this.intervalAction.address.httpMethod = '';\n        setTimeout(() => {\n          this.renderPopoverComponent();\n        }, 300); \n        break;\n      case this.template_type_custom:\n        setTimeout(() => {\n          this.renderPopoverComponent();\n        }, 300); \n    }\n  }\n\n  typeToggle(type: string) {\n    this.intervalAction = JSON.parse(JSON.stringify(this.intervalActionOlder));\n    this.intervalAction.address.type = type;\n    setTimeout(() => {\n      this.renderPopoverComponent();\n    }, 300); \n    // this.setActionDefaultProperties();\n  }\n\n  onCmdMethodSelected(method: string) {\n    this.intervalAction.address.httpMethod = method;\n  }\n\n  onCommandSelected(cmd: CoreCommand) {\n    this.intervalAction.address.path = cmd.path;\n  }\n\n  onSingleIntervalSelected(interval: Interval) {\n    this.intervalAction.intervalName = interval.name;\n  }\n\n  isPureIntegerType(value: any): boolean {\n    if (!isNaN(value) && (parseFloat(value) === parseInt(value))) {\n      return true\n    }\n    return false\n  }\n\n  validate(): boolean {\n    let result = true;\n    let basic =  this.intervalAction.name && this.intervalAction.intervalName; \n    switch (this.intervalAction.address.type) {\n      case this.addr_type_REST:\n        if (basic && this.intervalAction.address.host && this.isPureIntegerType(this.intervalAction.address.port) &&\n          this.intervalAction.address.path && this.intervalAction.address.httpMethod) {\n            result = false\n        }\n        break\n      case this.addr_type_MQTT: \n        if (basic && this.intervalAction.address.host && this.isPureIntegerType(this.intervalAction.address.port) &&\n          this.intervalAction.address.port &&\n          this.intervalAction.address.publisher &&\n          this.intervalAction.address.topic) {\n            result = false\n        }\n        break\n      case this.addr_type_EMAIL:\n        if (basic) {\n          result = false\n        }\n    }\n    return result\n  }\n\n  save() {\n    this.intervalAction.address.port = Number(this.intervalAction.address.port);\n    this.schedulerSvc.updateIntervalAction(this.intervalAction).subscribe(()=>{\n      this.msgSvc.success('Update interval action',`name: ${this.intervalAction.name}`);\n      this.router.navigate(['../interval-action-list'],{ relativeTo: this.route });\n    });\n  }\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<div class=\"card\">\n   <div class=\"card-header\">\n       <i class=\"fa fa-edit text-danger\"></i>\n       Edit Interval Action\n       <button class=\"btn btn-sm btn-success float-right\" (click)=\"save()\" [disabled]=\"validate()\">Save</button>\n   </div>\n   <div *ngIf=\"intervalAction\" class=\"card-body\">\n       <form>\n           <div class=\"form-group row has-validation\">\n               <label for=\"intervalActionName\" class=\"col-md-2 col-form-label\" required>Name</label>\n               <div class=\"col-md-10\">\n                   <input type=\"text\" class=\"form-control\" id=\"validationIntervalActionName\" [class.is-invalid]=\"!intervalAction.name\" [class.is-valid]=\"intervalAction.name\" name=\"intervalActionName\" [(ngModel)]=\"intervalAction.name\" required>\n                   <div id=\"validationIntervalActionNameFeedback\" class=\"invalid-feedback\">\n                       <small>the interval action name can't be empty!</small> \n                   </div>\n               </div>\n           </div>\n           <div class=\"form-group row\">\n               <label for=\"intervalName\" class=\"col-md-2 col-form-label\">IntervalName</label>\n               <div class=\"col-md-10\">\n                   <div *ngIf=\"selectedIntervalDefault\" class=\"mb-3\">\n                       <app-interval-combo-list [validate]=\"true\" [selectedInterval]=\"selectedIntervalDefault\" (intervalSelectedEvent)=\"onSingleIntervalSelected($event)\"></app-interval-combo-list>\n                   </div>\n               </div>\n           </div>\n           <div class=\"form-group row\">\n               <label for=\"Address\" class=\"col-md-2 col-form-label\">Address</label>\n               <div class=\"col-md-10\">\n                   <div class=\"card\">\n                       <div class=\"card-header\">\n                           <div class=\"form-check form-check-inline\">\n                               <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== addr_type_REST\" [class.badge-primary]=\"intervalAction.address.type === addr_type_REST\" >\n                                   <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"REST\" value=\"REST\" [(ngModel)]=\"intervalAction.address.type\" (change)=\"typeToggle('REST')\">\n                                   <label class=\"form-check-label\" for=\"REST\">REST</label>\n                               </span>\n                           </div>\n                           <div class=\"form-check form-check-inline\">\n                               <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== addr_type_MQTT\" [class.badge-primary]=\"intervalAction.address.type === addr_type_MQTT\" (click)=\"typeToggle('MQTT')\">\n                                   <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"MQTT\" value=\"MQTT\" [(ngModel)]=\"intervalAction.address.type\">\n                                   <label class=\"form-check-label\" for=\"MQTT\">MQTT</label>\n                               </span>\n                           </div>\n                           <div class=\"form-check form-check-inline\">\n                               <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== addr_type_EMAIL\" [class.badge-primary]=\"intervalAction.address.type === addr_type_EMAIL\" (click)=\"typeToggle('EMAIL')\">\n                                   <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"EMAIL\" value=\"EMAIL\" [(ngModel)]=\"intervalAction.address.type\">\n                                   <label class=\"form-check-label\" for=\"EMAIL\">EMAIL</label>\n                               </span>\n                           </div>\n                           <!-- <ul class=\"nav nav-tabs card-header-tabs\">\n                               <li class=\"nav-item\">\n                                   <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'REST'\" role=\"button\" (click)=\"typeToggle('REST')\">REST</a>\n                               </li>\n                               <li class=\"nav-item\">\n                                   <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'MQTT'\" role=\"button\" (click)=\"typeToggle('MQTT')\">MQTT</a>\n                               </li>\n                               <li class=\"nav-item\">\n                                   <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'EMAIL'\" role=\"button\" (click)=\"typeToggle('EMAIL')\">EMAIL</a>\n                               </li>\n                           </ul> -->\n                       </div>\n                       <div *ngIf=\"intervalAction.address.type === addr_type_REST\" class=\"card-header\">\n                            <span class=\"mr-2 text-primary\">Available and Editable templates >></span>\n                            <span class=\"fa fa-question-circle-o fa-lg mr-2\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                            data-content=\"custom template will be choosed by default\"></span>\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== template_type_coredata\" [class.badge-primary]=\"templateSelected === template_type_coredata\" (click)=\"templateToggle(template_type_coredata)\">CoreDataSeviceTemplate</span>\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== template_type_command\" [class.badge-primary]=\"templateSelected === template_type_command\" (click)=\"templateToggle(template_type_command)\">CommandServiceTemplate</span>\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== template_type_custom\" [class.badge-primary]=\"templateSelected === template_type_custom\" (click)=\"templateToggle(template_type_custom)\">CustomTemplate</span>\n                        </div>\n                       <div class=\"card-body\">\n                           <div *ngIf=\"intervalAction.address.type === 'REST'\" #REST>\n                            <div [ngSwitch]=\"templateSelected\">\n                                <ng-template [ngSwitchCase]=\"template_type_custom\" #customTemplate>\n                                    <form>\n                                        <div class=\"form-group row\">\n                                            <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>HttpMethod</label>\n                                            <div class=\"col-md-10\">\n                                                <select type=\"text\" class=\"form-control\" name=\"httpMethod\" [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                    <option value=\"GET\">GET</option>\n                                                    <option value=\"POST\">POST</option>\n                                                    <option value=\"PUT\">PUT</option>\n                                                    <option value=\"DELETE\">DELETE</option>\n                                                    <option value=\"PATCH\">PATCH</option>\n                                                    <option value=\"HEAD\">HEAD</option>\n                                                    <option value=\"TRACE\">TRACE</option>\n                                                    <option value=\"CONNECT\">CONNECT</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>Host</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address host can't be empty!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>Path</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressPath\" name=\"addressPath\" [(ngModel)]=\"intervalAction.address.path\">\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>RequestBody</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\">\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>\n                                                <span class=\"mr-2\">ContentType</span>\n                                                <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                 data-content=\"Indicates which request contentType should be used (i.e. text/html, application/json), the default is application/json if not setup\"></span>\n                                            </label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"contentType\" name=\"contentType\" [(ngModel)]=\"intervalAction.address.contentType\">\n                                            </div>\n                                        </div>\n                                    </form>\n                                </ng-template>\n                                <ng-template [ngSwitchCase]=\"template_type_coredata\" #coredataTemplate>\n                                    <form>\n                                        <div class=\"form-group row\">\n                                            <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>HttpMethod</label>\n                                            <div class=\"col-md-10\">\n                                                <select type=\"text\" class=\"form-control\" name=\"httpMethod\" [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                    <option value=\"DELETE\">DELETE</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>\n                                                <span class=\"mr-2\">Host</span>\n                                                <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                 data-content=\"Both Host and Port fields are editable if you have a different host address !\"></span>\n                                            </label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address host can't be empty!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>\n                                                <span class=\"mr-2\">Path</span>\n                                                <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                data-content=\"Remove all old events (and associated readings) based on delimiting age, the parameters delimiting age will be filled up automatically when requestBody selected!\"></span>\n                                            </label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressPath\" name=\"addressPath\" [(ngModel)]=\"intervalAction.address.path\" disabled>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>Parameter</label>\n                                            <div class=\"col-md-10\">\n                                                <div class=\"input-group\">\n                                                    <div class=\"input-group-prepend\">\n                                                        <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                                                    </div>\n                                                    <input type=\"text\" class=\"form-control\" name=\"coredataRequestParameter\" [(ngModel)]=\"coredataRequestParameter\">\n                                                </div>\n                                                <!-- <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\"> -->\n                                            </div>\n                                        </div>\n                                    </form>\n                                </ng-template>\n                                <ng-template [ngSwitchCase]=\"template_type_command\" #commandTemplate>\n                                    <form>\n                                        <div class=\"form-group row\">\n                                            <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>\n                                                 <span class=\"mr-2\">HttpMethod</span>\n                                                 <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                 data-content=\"httpMethod field will be filled up automatically when the path field is selected! \"></span>\n                                            </label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\"  name=\"httpMethod\" disabled [(ngModel)]=\"intervalAction.address.httpMethod\" required>\n                                                <!-- <select type=\"text\" class=\"form-control\" name=\"httpMethod\" disabled [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                    <option value=\"GET\">GET</option>\n                                                    <option value=\"PUT\">PUT</option>\n                                                </select> -->\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>\n                                                <span class=\"mr-2\">Host</span>\n                                                <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                 data-content=\"Both Host and Port fields are editable if you have a different host address !\"></span>\n                                            </label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address host can't be empty!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row has-validation\">\n                                            <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                    <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>Path</label>\n                                            <div class=\"col-md-10\">\n                                                <app-device-core-command-combo-list [validate]=\"true\" (cmdMethodEvent)=\"onCmdMethodSelected($event)\" (commandSelectedEvent)=\"onCommandSelected($event)\"></app-device-core-command-combo-list>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>RequestBody</label>\n                                            <div class=\"col-md-10\">\n                                                <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\">\n                                            </div>\n                                        </div>\n                                    </form>\n                                </ng-template>\n                            </div>\n                               <!-- <form>\n                                   <div class=\"form-group row\">\n                                       <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>HttpMethod</label>\n                                       <div class=\"col-md-10\">\n                                           <select type=\"text\" class=\"form-control\" name=\"httpMethod\" [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                               <option value=\"GET\">GET</option>\n                                               <option value=\"POST\">POST</option>\n                                               <option value=\"PUT\">PUT</option>\n                                               <option value=\"DELETE\">DELETE</option>\n                                               <option value=\"PATCH\">PATCH</option>\n                                               <option value=\"HEAD\">HEAD</option>\n                                               <option value=\"TRACE\">TRACE</option>\n                                               <option value=\"CONNECT\">CONNECT</option>\n                                           </select>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressHost\" class=\"col-md-2 col-form-label\" required>Host</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressHost\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                           <div id=\"addressHostFeedback\" class=\"invalid-feedback\">\n                                               <small>the REST address host can't be empty!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressPort\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressPort\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                           <div id=\"addressPortFeedback\" class=\"invalid-feedback\">\n                                               <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>Path</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressPath\" name=\"addressPath\" [(ngModel)]=\"intervalAction.address.path\">\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                        <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>RequestBody</label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\">\n                                        </div>\n                                    </div>\n                               </form> -->\n                           </div>\n                           <div *ngIf=\"intervalAction.address?.type === addr_type_MQTT\" #MQTT>\n                               <form>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressHost\" class=\"col-md-2 col-form-label\" required>Host</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressHost\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                           <div id=\"addressHostFeedback\" class=\"invalid-feedback\">\n                                               <small>the MQTT host can't be empty!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressPort\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressPort\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                           <div id=\"addressPortFeedback\" class=\"invalid-feedback\">\n                                               <small>the MQTT port can't be empty and only pure integer is supported!!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressPublisher\" class=\"col-md-2 col-form-label\" required>Publisher</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressPublisher\" [class.is-invalid]=\"!intervalAction.address.publisher\" [class.is-valid]=\"intervalAction.address.publisher\" name=\"addressPublisher\" [(ngModel)]=\"intervalAction.address.publisher\" required>\n                                           <div id=\"addressPublisherFeedback\" class=\"invalid-feedback\">\n                                               <small>the MQTT publisher can't be empty!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row has-validation\">\n                                       <label for=\"addressTopic\" class=\"col-md-2 col-form-label\" required>Topic</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"addressTopic\" [class.is-invalid]=\"!intervalAction.address.topic\" [class.is-valid]=\"intervalAction.address.topic\" name=\"addressTopic\" [(ngModel)]=\"intervalAction.address.topic\" required>\n                                           <div id=\"addressTopicFeedback\" class=\"invalid-feedback\">\n                                               <small>the MQTT topic can't be empty!</small> \n                                           </div>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressQoS\" class=\"col-md-2 col-form-label\" required>QoS</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"number\" class=\"form-control\" id=\"addressQoS\" name=\"addressQoS\" [(ngModel)]=\"intervalAction.address.qos\" required>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressKeepAlive\" class=\"col-md-2 col-form-label\" required>KeepAlive</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"number\" class=\"form-control\" id=\"addressKeepAlive\" name=\"addressKeepAlive\" [(ngModel)]=\"intervalAction.address.keepAlive\">\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressRetained\" class=\"col-md-2 col-form-label\" required>Retained</label>\n                                       <div class=\"col-md-10\">\n                                           <select type=\"text\" class=\"form-control\" id=\"addressRetained\" name=\"addressRetained\" [(ngModel)]=\"intervalAction.address.retained\">\n                                               <option [ngValue]=\"false\" selected>false</option>\n                                               <option [ngValue]=\"true\">true</option>\n                                           </select>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressAutoReconnect\" class=\"col-md-2 col-form-label\" required>AutoReconnect</label>\n                                       <div class=\"col-md-10\">\n                                           <select type=\"text\" class=\"form-control\" id=\"addressAutoReconnect\" name=\"addressAutoReconnect\" [(ngModel)]=\"intervalAction.address.autoReconnect\">\n                                               <option [ngValue]=\"true\" selected>true</option>\n                                               <option [ngValue]=\"false\">false</option>\n                                           </select>\n                                       </div>\n                                   </div>\n                                   <div class=\"form-group row\">\n                                       <label for=\"addressConnectTimeout\" class=\"col-md-2 col-form-label\" required>ConnectTimeout</label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"number\" class=\"form-control\" id=\"addressConnectTimeout\" name=\"addressConnectTimeout\" [(ngModel)]=\"intervalAction.address.connectTimeout\">\n                                       </div>\n                                   </div>\n                               </form>\n                           </div>\n                           <div [style.display]=\"intervalAction.address.type !== addr_type_EMAIL ? 'none' : ''\" #EMAIL>\n                               <form>\n                                   <div class=\"form-group row\">\n                                       <label for=\"emailRecipients\" class=\"col-md-2 col-form-label\">\n                                           <span class=\"mr-2\">EmailRecipients</span>\n                                           <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                                           data-content=\"Multiple email addresses are separated by commas\"></span>\n                                       </label>\n                                       <div class=\"col-md-10\">\n                                           <input type=\"text\" class=\"form-control\" id=\"emailRecipients\" name=\"emailRecipients\" [(ngModel)]=\"addressEmailRecipients\">\n                                       </div>\n                                   </div>\n                               </form>\n                           </div>\n                       </div>\n                   </div>\n               </div>\n           </div>\n       </form>\n   </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-interval-action-center',\n  templateUrl: './interval-action-center.component.html',\n  styleUrls: ['./interval-action-center.component.css']\n})\nexport class IntervalActionCenterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<router-outlet></router-outlet>","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { IntervalAction } from '../../../contracts/v2/interval-action';\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { MultiIntervalActionResponse } from '../../../contracts/v2/responses/interval-action-response';\nimport { MessageService } from '../../../message/message.service';\n\n@Component({\n  selector: 'app-interval-action-list',\n  templateUrl: './interval-action-list.component.html',\n  styleUrls: ['./interval-action-list.component.css']\n})\nexport class IntervalActionListComponent implements OnInit {\n\n  intervalActionList: IntervalAction[] = [];\n  intervalActionSelected: IntervalAction[] = [];\n  isCheckedAll: boolean = false;\n  pagination: number = 1;\n  pageLimit: number = 5;\n  pageOffset: number = (this.pagination - 1) * this.pageLimit;\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['intervalName']) {\n\n      } else {\n        this.findIntervalActionsPagination();\n      }\n    })\n  }\n\n  refresh() {\n    this.schedulerSvc.findAllIntervalActionsPagination(0, this.pageLimit).subscribe((data: MultiIntervalActionResponse) => {\n      this.intervalActionList = data.actions;\n      this.msgSvc.success('refresh');\n      this.resetPagination();\n    });\n  }\n\n  findIntervalActionsPagination() {\n    this.schedulerSvc.findAllIntervalActionsPagination(this.pageOffset, this.pageLimit).subscribe((data: MultiIntervalActionResponse) => {\n      this.intervalActionList = data.actions;\n    });\n  }\n\n  selectAll(event: any) {\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.intervalActionSelected = [];\n      this.intervalActionList.forEach(intervalAction => {\n        this.intervalActionSelected.push(intervalAction);\n        this.isChecked(intervalAction.name);\n      });\n      this.isCheckedAll = true;\n      return\n    }\n    this.isCheckedAll = false;\n    this.intervalActionSelected = [];\n    this.intervalActionList.forEach(intervalAction => {\n      this.isChecked(intervalAction.name);\n    });\n  }\n\n  isChecked(name: string): boolean {\n    return this.intervalActionSelected.findIndex(v => v.name === name) >= 0;\n  }\n\n  selectOne(event: any, intervalAction: IntervalAction) {\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.intervalActionSelected.push(intervalAction);\n      if (this.intervalActionSelected.length === this.intervalActionList.length) {\n        this.isCheckedAll = true;\n      }\n      return\n    }\n    this.isCheckedAll = false;\n    this.isChecked(intervalAction.name);\n    this.intervalActionSelected.splice(this.intervalActionSelected.indexOf(intervalAction), 1)\n  }\n\n  edit() {\n    this.router.navigate(['../edit-interval-action'], {\n      relativeTo: this.route,\n      queryParams: { 'intervalActionName': this.intervalActionSelected[0].name }\n    })\n  }\n\n  deleteConfirm() {\n    $(\"#deleteConfirmDialog\").modal('show');\n  }\n\n  deleteIntervalActions() {\n    this.intervalActionSelected.forEach((intervalAction,i) => {\n      this.schedulerSvc.deleteIntervalActionByName(intervalAction.name).subscribe(() => {\n        this.intervalActionList.forEach((item, index) => {\n          if (item.name === intervalAction.name) {\n            this.intervalActionList.splice(index,1);\n            return\n          }\n        });\n        this.intervalActionSelected.splice(i,1);\n        this.msgSvc.success('delete', `name: ${intervalAction.name}`);\n        this.resetPagination();\n        this.findIntervalActionsPagination();\n      });\n    });\n    $(\"#deleteConfirmDialog\").modal('hide');\n  }\n\n  onPageSelected() {\n    this.resetPagination();\n    this.setPagination();\n    this.findIntervalActionsPagination();\n  }\n\n  prePage() {\n    this.setPagination(-1);\n    this.findIntervalActionsPagination();\n  }\n\n  nextPage() {\n    this.setPagination(1);\n    this.findIntervalActionsPagination();\n  }\n\n  setPagination(n?: number) {\n    if (n === 1) {\n      this.pagination += 1;\n    } else if (n === -1) {\n      this.pagination -= 1;\n    }\n    this.pageOffset = (this.pagination - 1) * this.pageLimit;\n  }\n\n  resetPagination() {\n    this.pagination = 1;\n  }\n\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<div class=\"card\">\n    <div class=\"card-header\">\n        <i class=\"fa fa-list text-danger\"></i> Interval Action List\n    </div>\n    <div class=\"card-body p-0 position-relative\">\n        <div class=\"bg-light px-2 py-2\">\n            <div class=\"btn-group btn-group-sm\" role=\"group\">\n                <button class=\"btn btn-primary\" (click)=\"refresh()\">\n                    <span><i class=\"fa fa-refresh mr-1\"></i>Refresh</span> \n                </button>\n                <button type=\"button\" class=\"btn btn-info\"  routerLink=\"../add-interval-action\">\n                    <span><i class=\"fa fa-plus mr-1\"></i>Add</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-success\" (click)=\"edit()\" [disabled]=\"intervalActionSelected.length !== 1\">\n                    <span><i class=\"fa fa-edit mr-1\"></i>Edit</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteConfirm()\" [disabled]=\"intervalActionSelected.length === 0\">\n                    <span><i class=\"fa fa-trash mr-1\"></i>Delete</span>\n                </button>\n              </div>\n        </div>\n        <div class=\"table-responsive \">\n            <table class=\"table table-hover text-truncate \">\n                <thead class=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\"><input type=\"checkbox\" role=\"button\" [checked]=\"isCheckedAll\" (click)=\"selectAll($event)\"></th>\n                      <th scope=\"col\">ID</th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">AssociatedInterval</th>\n                      <th scope=\"col\">AddressType</th>\n                      <!-- <th scope=\"col\">Created</th>\n                      <th scope=\"col\">Modified</th> -->\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let intervalAction of intervalActionList\" [class.table-active]=\"isChecked(intervalAction.name)\">\n                        <td> <input type=\"checkbox\" role=\"button\"  [checked]=\"isChecked(intervalAction.name)\" (click)=\"selectOne($event,intervalAction)\"></td>\n                        <td class=\"user-select-all\">{{intervalAction.id}}</td>\n                        <td class=\"user-select-all\">{{intervalAction.name}}</td>\n                        <td>\n                            <a routerLink=\"../../interval-center\" [queryParams]=\"{'intervalName':intervalAction.intervalName}\">{{intervalAction.intervalName}}</a>\n                        </td>\n                        <td>{{intervalAction.address.type}}</td>                        \n                        <!-- <td>{{interval.created | date:'yyyy-MM-dd hh:mm:ss'}}</td>\n                        <td>{{interval.modified | date:'yyyy-MM-dd hh:mm:ss' }}</td> -->\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class=\"card-footer text-muted p-1\">\n        <nav aria-label=\"navigation\">\n            <ul class=\"pagination justify-content-end m-0\">\n                <li class=\"page-item mr-2 mt-1\">\n                    <span class=\"align-middle\">items per page</span>\n                </li>\n                <li class=\"page-item mr-2 \">\n                    <select class=\"form-control\" name=\"pageLimit\" id=\"pageLimit\" [(ngModel)]=\"pageLimit\" (ngModelChange)=\"onPageSelected()\">\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"20\">20</option>\n                    </select>\n                </li>\n                <li class=\"page-item mr-1\">\n                    <button class=\"page-link btn\" (click)=\"prePage()\" [disabled]=\"pagination === 1\"> <i class=\"fa fa-angle-double-left\"></i> Previous</button>\n                </li>\n                <li class=\"page-item\" >\n                    <button class=\"page-link btn\" (click)=\"nextPage()\" [disabled]=\"this.pageLimit > intervalActionList.length\">Next <i class=\"fa fa-angle-double-right\"></i></button>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</div>\n\n<div class=\"modal fade\" id=\"deleteConfirmDialog\" data-backdrop=\"static\" data-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"deleteConfirmDialogLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title text-danger\" id=\"deleteConfirmDialogLabel\">\n                    <i class=\"fa fa-warning\"></i>\n                    Warning\n                </h5>  \n            </div>\n            <div class=\"modal-body\">\n                The data will be permanently erased!!! Are you sure to execute delete operation？\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteIntervalActions()\">Confirm</button>\n            </div>\n        </div>\n    </div>\n</div>\n    \n    ","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit, OnDestroy} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Interval } from '../../../contracts/v2/interval';\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { IntervalResponse } from '../../../contracts/v2/responses/interval-response';\nimport { MessageService } from '../../../message/message.service';\nimport { ErrorService } from '../../../services/error.service';\nimport { BaseResponse } from '../../../contracts/v2/common/base-response';\nimport flatpickr from 'flatpickr';\n\n@Component({\n  selector: 'app-edit-interval',\n  templateUrl: './edit-interval.component.html',\n  styleUrls: ['./edit-interval.component.css']\n})\nexport class EditIntervalComponent implements OnInit, OnDestroy {\n\n  interval?: Interval;\n  calendarStart: any;\n  calendarEnd: any;\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private errSvc: ErrorService) { }\n\n  ngOnInit(): void {\n    \n    this.route.queryParams.subscribe(param => {\n      if (param['intervalName']) {\n        this.schedulerSvc.findIntervalByName(param['intervalName']).subscribe((data: IntervalResponse) => {\n          if (this.errSvc.handleErrorForV2API(data)){\n            return\n          }\n          this.interval = data.interval;\n          this.interval.runOnce = this.interval.runOnce?true:false;\n          setTimeout(() => {\n            this.initDatePickr();\n          }, 300);\n        });\n      }\n    });\n  }\n\n  initDatePickr() {\n    $('[data-toggle=\"popover\"]').popover({\n      trigger: 'hover'\n    });\n    this.calendarStart = flatpickr(\"input[name='intervalStart']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false\n    });\n    this.calendarEnd = flatpickr(\"input[name='intervalEnd']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false\n    });\n  }\n\n  update() {\n    this.schedulerSvc.updateInterval(this.interval as Interval).subscribe((data: BaseResponse[]) => {\n      if (this.errSvc.handleErrorForV2API(data)){\n        return\n      }\n      this.msgSvc.success('update interval', `name: ${this.interval?.name}`);\n      this.router.navigate(['../interval-list'],{relativeTo: this.route})\n    });\n  }\n\n  ngOnDestroy(): void {\n    $('[data-toggle=\"popover\"]').popover('dispose');\n  }\n}\n\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<div class=\"card\">\n    <div class=\"card-header\">\n        <i class=\"fa fa-edit text-danger\"></i>\n        Edit Interval {{interval?.name}}\n        <button class=\"btn btn-sm btn-success float-right\" (click)=\"update()\" [disabled]=\"!interval?.name\">Submit</button>\n    </div>\n    <div class=\"card-body\">\n        <form *ngIf=\"interval as Interval\">\n            <div class=\"form-group row has-validation\">\n                <label for=\"intervalName\" class=\"col-md-2 col-form-label\" required>Name</label>\n                <div class=\"col-md-10\">\n                    <input type=\"text\" class=\"form-control\" [class.is-invalid]=\"!interval.name\" [class.is-valid]=\"interval.name\" name=\"intervalName\" [(ngModel)]=\"interval.name\">\n                    <div id=\"validationIntervalNameFeedback\" class=\"invalid-feedback\">\n                        <small>the interval name can't be empty!</small> \n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalStart\" class=\"col-md-2 col-form-label\">Start</label>\n                <div class=\"col-md-10\">\n                    <div class=\"input-group mb-3\">\n                        <div class=\"input-group-prepend\">\n                            <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                        </div>\n                        <input type=\"text\" class=\"form-control\" name=\"intervalStart\" [(ngModel)]=\"interval.start\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalEnd2\" class=\"col-md-2 col-form-label\">End</label>\n                <div class=\"col-md-10\">\n                    <div class=\"input-group mb-3\">\n                        <div class=\"input-group-prepend\">\n                            <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                        </div>\n                        <input type=\"text\" class=\"form-control\" name=\"intervalEnd\" [(ngModel)]=\"interval.end\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalInterval\" class=\"col-md-2 col-form-label\">\n                    <span class=\"mr-2\">Interval</span> \n                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"true\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"ISO8601 duration format\" \n                    data-content='Interval indicates how often the specific resource needs to be polled. It represents as a duration string. The format of this field is to be an unsigned integer followed by a unit which may be \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours. Eg, \"100ms\", \"24h\"'></span>\n                </label>\n                <div class=\"col-md-10\">\n                    <input type=\"text\" class=\"form-control\" name=\"intervalInterval\" [class.is-invalid]=\"!interval.interval\" [class.is-valid]=\"interval.interval\" [(ngModel)]=\"interval.interval\" required>\n                    <div id=\"validationIntervalIntervalFeedback\" class=\"invalid-feedback\">\n                        <small>the interval interval can't be empty!</small> \n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalRunOnce\" class=\"col-md-2 col-form-label\">RunOnce</label>\n                <div class=\"col-md-10\">\n                    <select class=\"custom-select\" name=\"intervalRunOnce\" [(ngModel)]=\"interval.runOnce\">\n                        <option [ngValue]=\"false\">false</option>\n                        <option [ngValue]=\"true\">true</option>\n                    </select>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-interval-center',\n  templateUrl: './interval-center.component.html',\n  styleUrls: ['./interval-center.component.css']\n})\nexport class IntervalCenterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n \n<router-outlet></router-outlet>","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\n\nimport { Interval } from '../../../contracts/v2/interval';\n\n@Component({\n  selector: 'app-interval-combo-list',\n  templateUrl: './interval-combo-list.component.html',\n  styleUrls: ['./interval-combo-list.component.css']\n})\nexport class IntervalComboListComponent implements OnInit {\n\n  visible: boolean = false;\n  @Input() validate: boolean = false;\n  @Input() selectedInterval: Interval;\n  @Output() intervalSelectedEvent = new EventEmitter<Interval>();\n\n  constructor() { \n    this.selectedInterval = {} as Interval;\n  }\n\n  ngOnInit(): void { }\n\n  onSingleIntervalSelected(interval: Interval) {\n    this.selectedInterval = interval;\n    this.intervalSelectedEvent.emit(interval);\n  }\n\n  close(event: any) {\n    event.stopPropagation();\n    this.visible = false;\n  }\n\n  toggle(event: any) {\n    event.stopImmediatePropagation();\n    if (this.visible) {\n      this.visible = false;\n      return\n    }\n    this.visible = true;\n  }\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n <div class=\"combo-shielder\" *ngIf=\"visible\" (click)=\"close($event)\"></div>\n <div class=\"combo\">\n    <div class=\"input-group has-validation\" (click)=\"toggle($event)\">\n        <input type=\"text\" class=\"form-control\" name=\"selectedInterval\" readonly=\"readonly\" maxlength=\"0\" [(ngModel)]=\"selectedInterval.name\" [class.is-invalid]=\"!selectedInterval.name && validate\" [class.is-valid]=\"selectedInterval.name && validate\" required>\n        <div class=\"input-group-append\">\n            <span class=\"input-group-text\" role=\"button\"><i class=\"fa fa-chevron-down\"></i></span>\n        </div> \n        <div id=\"validationIntervalNameFeedback\" class=\"invalid-feedback\">\n            <small>the interval name can't be empty!</small> \n        </div>\n    </div>\n    <div [style.display]=\"!visible ? 'none': ''\" class=\"combo-body shadow rounded\">\n        <app-interval-list \n        (singleIntervalSelectedEvent)=\"onSingleIntervalSelected($event)\"\n        [singleIntervalSelected]=\"selectedInterval\"\n        [enableSelectAll]=\"false\"\n        [toolbars]=\"false\"\n        ></app-interval-list>\n    </div>\n </div>\n","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { SchedulerRoutingModule } from './scheduler-routing.module';\nimport { SchedulerComponent } from './scheduler.component';\nimport { AddIntervalComponent } from './interval/add-interval/add-interval.component';\nimport { EditIntervalComponent } from './interval/edit-interval/edit-interval.component';\nimport { IntervalListComponent } from './interval/interval-list/interval-list.component';\nimport { IntervalActionListComponent } from './intervalaction/interval-action-list/interval-action-list.component';\nimport { AddIntervalActionComponent } from './intervalaction/add-interval-action/add-interval-action.component';\nimport { EditIntervalActionComponent } from './intervalaction/edit-interval-action/edit-interval-action.component';\nimport { IntervalCenterComponent } from './interval/interval-center/interval-center.component';\nimport { IntervalActionCenterComponent } from './intervalaction/interval-action-center/interval-action-center.component';\nimport { IntervalComboListComponent } from './interval/interval-combo-list/interval-combo-list.component';\nimport { CommandModule } from '../command/command.module';\n\n@NgModule({\n  declarations: [SchedulerComponent, AddIntervalComponent, EditIntervalComponent, IntervalListComponent, IntervalActionListComponent, AddIntervalActionComponent, EditIntervalActionComponent, IntervalCenterComponent, IntervalActionCenterComponent, IntervalComboListComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    CommandModule,\n    SchedulerRoutingModule,\n    \n  ]\n})\nexport class SchedulerModule { }\n","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SchedulerComponent } from './scheduler.component';\nimport { IntervalCenterComponent } from './interval/interval-center/interval-center.component';\nimport { IntervalListComponent } from './interval/interval-list/interval-list.component';\nimport { AddIntervalComponent } from './interval/add-interval/add-interval.component';\nimport { EditIntervalComponent } from './interval/edit-interval/edit-interval.component';\nimport { IntervalActionCenterComponent } from './intervalaction/interval-action-center/interval-action-center.component';\nimport { IntervalActionListComponent } from './intervalaction/interval-action-list/interval-action-list.component';\nimport { AddIntervalActionComponent } from './intervalaction/add-interval-action/add-interval-action.component';\nimport { EditIntervalActionComponent } from './intervalaction/edit-interval-action/edit-interval-action.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SchedulerComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'interval-center',\n        pathMatch: 'full'\n      },\n      {\n        path: 'interval-center',\n        component: IntervalCenterComponent,\n        children: [\n          {\n            path: '',\n            redirectTo: 'interval-list',\n            pathMatch: 'full'\n          },\n          {\n            path: 'interval-list',\n            component: IntervalListComponent\n          },\n          {\n            path: 'add-interval',\n            component: AddIntervalComponent\n          },\n          {\n            path: 'edit-interval',\n            component: EditIntervalComponent\n          }\n        ]\n      },\n      {\n        path: 'interval-action-center',\n        component: IntervalActionCenterComponent,\n        children: [\n          {\n            path: '',\n            redirectTo: 'interval-action-list',\n            pathMatch: 'full'\n          },\n          {\n            path: 'interval-action-list',\n            component: IntervalActionListComponent\n          },\n          {\n            path: 'add-interval-action',\n            component: AddIntervalActionComponent\n          },\n          {\n            path: 'edit-interval-action',\n            component: EditIntervalActionComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SchedulerRoutingModule { }\n","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Interval } from '../../../contracts/v2/interval';\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { MultiIntervalResponse, IntervalResponse } from '../../../contracts/v2/responses/interval-response';\nimport { MessageService } from '../../../message/message.service';\nimport { ErrorService } from '../../../services/error.service';\nimport { BaseResponse } from '../../../contracts/v2/common/base-response';\n\n@Component({\n  selector: 'app-interval-list',\n  templateUrl: './interval-list.component.html',\n  styleUrls: ['./interval-list.component.css']\n})\nexport class IntervalListComponent implements OnInit {\n\n  @Input() enableSelectAll: boolean = true;\n  @Output() singleIntervalSelectedEvent = new EventEmitter<Interval>();\n  @Input() toolbars: boolean = true;\n  intervalList: Interval[] = [];\n  intervalSelected: Interval[] = [];\n  @Input() singleIntervalSelected?: Interval;\n  isCheckedAll: boolean = false;\n  pagination: number = 1;\n  pageLimit: number = 5;\n  pageOffset: number = (this.pagination - 1) * this.pageLimit;\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private errSvc: ErrorService) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['intervalName']) {\n        this.schedulerSvc.findIntervalByName(params['intervalName']).subscribe((resp:IntervalResponse)=>{\n          this.intervalList = [];\n          this.intervalList.push(resp.interval);\n          return\n        })\n      } else {\n        this.findIntervalsPagination();\n      }\n    })\n  }\n\n  refresh() {\n    this.schedulerSvc.findAllIntervalsPagination(0, this.pageLimit).subscribe((data: MultiIntervalResponse) => {\n      if (this.errSvc.handleErrorForV2API(data)){\n        return\n      }\n      this.intervalList = data.intervals;\n      this.msgSvc.success('refresh');\n      this.resetPagination();\n    });\n  }\n\n  findIntervalsPagination() {\n    this.schedulerSvc.findAllIntervalsPagination(this.pageOffset, this.pageLimit).subscribe((data: MultiIntervalResponse) => {\n      if (this.errSvc.handleErrorForV2API(data)){\n        return\n      }\n      this.intervalList = data.intervals;\n    });\n  }\n\n  onSingleIntervalSelectedEmitter() {\n    this.singleIntervalSelectedEvent.emit(this.singleIntervalSelected);\n  }\n\n  isSingleChecked(name: string) {\n    return this.singleIntervalSelected?.name === name;\n  }\n\n  selectSingleInterval(event: any, name: string) {\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.intervalList.forEach((interval) => {\n        if (interval.name === name) {\n          this.singleIntervalSelected = interval;\n        }\n      });\n    } else {\n      this.singleIntervalSelected = {} as Interval;\n    }\n    this.onSingleIntervalSelectedEmitter();\n  }\n\n  selectAll(event: any) {\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.intervalSelected = [];\n      this.intervalList.forEach(interval => {\n        this.intervalSelected.push(interval);\n        this.isChecked(interval.name);\n      });\n      this.isCheckedAll = true;\n      return\n    }\n    this.isCheckedAll = false;\n    this.intervalSelected = [];\n    this.intervalList.forEach(interval => {\n      this.isChecked(interval.name);\n    });\n  }\n\n  isChecked(name: string): boolean {\n    if (!this.enableSelectAll) {\n      return this.isSingleChecked(name)\n    }\n    return this.intervalSelected.findIndex(v => v.name === name) >= 0;\n  }\n\n  selectOne(event: any, interval: Interval) {\n    if (!this.enableSelectAll) {\n      this.selectSingleInterval(event, interval.name);\n      return\n    }\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.intervalSelected.push(interval);\n      if (this.intervalSelected.length === this.intervalList.length) {\n        this.isCheckedAll = true;\n      }\n      return\n    }\n    this.isCheckedAll = false;\n    this.isChecked(interval.name);\n    this.intervalSelected.splice(this.intervalSelected.indexOf(interval), 1)\n  }\n\n  edit() {\n    this.router.navigate(['../edit-interval'], {\n      relativeTo: this.route,\n      queryParams: { 'intervalName': this.intervalSelected[0].name }\n    })\n  }\n\n  deleteConfirm() {\n    $(\"#deleteConfirmDialog\").modal('show');\n  }\n\n  deleteIntervals() {\n    this.intervalSelected.forEach((interval,i) => {\n      this.schedulerSvc.deleteIntervalByName(interval.name).subscribe((data: BaseResponse[]) => {\n        if (this.errSvc.handleErrorForV2API(data)){\n          return\n        }\n        this.intervalSelected.splice(i,1);\n        this.intervalList.forEach((item, index) => {\n          if (item.name === interval.name) {\n            this.intervalList.splice(index,1);\n            return\n          }\n        });\n        this.msgSvc.success('delete', `name: ${interval.name}`);\n        this.resetPagination();\n        this.findIntervalsPagination();\n      });\n    });\n    $(\"#deleteConfirmDialog\").modal('hide');\n  }\n\n  onPageSelected() {\n    this.resetPagination();\n    this.setPagination();\n    this.findIntervalsPagination();\n  }\n\n  prePage() {\n    this.setPagination(-1);\n    this.findIntervalsPagination();\n  }\n\n  nextPage() {\n    this.setPagination(1);\n    this.findIntervalsPagination();\n  }\n\n  setPagination(n?: number) {\n    if (n === 1) {\n      this.pagination += 1;\n    } else if (n === -1) {\n      this.pagination -= 1;\n    }\n    this.pageOffset = (this.pagination - 1) * this.pageLimit;\n  }\n\n  resetPagination() {\n    this.pagination = 1;\n  }\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n<div class=\"card\">\n    <div class=\"card-header\">\n        <i class=\"fa fa-list text-danger\"></i> Interval List\n    </div>\n    <div class=\"card-body p-0 position-relative\">\n        <div *ngIf=\"toolbars\" class=\"bg-light px-2 py-2\">\n            <div class=\"btn-group btn-group-sm\" role=\"group\">\n                <button class=\"btn btn-primary\" (click)=\"refresh()\">\n                    <span><i class=\"fa fa-refresh mr-1\"></i>Refresh</span> \n                </button>\n                <button type=\"button\" class=\"btn btn-info\"  routerLink=\"../add-interval\">\n                    <span><i class=\"fa fa-plus mr-1\"></i>Add</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-success\" (click)=\"edit()\" [disabled]=\"intervalSelected.length !== 1\">\n                    <span><i class=\"fa fa-edit mr-1\"></i>Edit</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteConfirm()\" [disabled]=\"intervalSelected.length === 0\">\n                    <span><i class=\"fa fa-trash mr-1\"></i>Delete</span>\n                </button>\n              </div>\n        </div>\n        <div class=\"table-responsive \">\n            <table class=\"table table-hover text-truncate \">\n                <thead class=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\"><input *ngIf=\"enableSelectAll\" type=\"checkbox\" role=\"button\" [checked]=\"isCheckedAll\" (click)=\"selectAll($event)\"></th>\n                      <th scope=\"col\">ID</th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Start</th>\n                      <th scope=\"col\">End</th>\n                      <th scope=\"col\">Interval</th>\n                      <th scope=\"col\">RunOnce</th>\n                      <!-- <th scope=\"col\">AssociatedActions</th> -->\n                      <!-- <th scope=\"col\">Created</th>\n                      <th scope=\"col\">Modified</th> -->\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let interval of intervalList\" [class.table-active]=\"isChecked(interval.name)\">\n                        <td> <input type=\"checkbox\" role=\"button\"  [checked]=\"isChecked(interval.name)\" (click)=\"selectOne($event,interval)\"></td>\n                        <td class=\"user-select-all\">{{interval.id}}</td>\n                        <td class=\"user-select-all\">{{interval.name}}</td>\n                        <td>{{interval.start}}</td>\n                        <td>{{interval.end}}</td>\n                        <td>{{interval.interval}}</td>\n                        <td>{{interval.runOnce?true:false}}</td>\n                        <!-- <td class=\"text-center\">\n                            <a routerLink=\"../../interval-action-center\" [queryParams]=\"{'intervalName':interval.name}\">\n                                <i class=\"fa fa-share-alt-square fa-lg\"></i>\n                            </a>\n                        </td> -->\n                        <!-- <td>{{interval.created | date:'yyyy-MM-dd hh:mm:ss'}}</td>\n                        <td>{{interval.modified | date:'yyyy-MM-dd hh:mm:ss' }}</td> -->\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class=\"card-footer text-muted p-1\">\n        <nav aria-label=\"navigation\">\n            <ul class=\"pagination justify-content-end m-0\">\n                <li class=\"page-item mr-2 mt-1\">\n                    <span class=\"align-middle\">items per page</span>\n                </li>\n                <li class=\"page-item mr-2 \">\n                    <select class=\"form-control\" name=\"pageLimit\" id=\"pageLimit\" [(ngModel)]=\"pageLimit\" (ngModelChange)=\"onPageSelected()\">\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"20\">20</option>\n                    </select>\n                </li>\n                <li class=\"page-item mr-1\">\n                    <button class=\"page-link btn\" (click)=\"prePage()\" [disabled]=\"pagination === 1\"> <i class=\"fa fa-angle-double-left\"></i> Previous</button>\n                </li>\n                <li class=\"page-item\" >\n                    <button class=\"page-link btn\" (click)=\"nextPage()\" [disabled]=\"this.pageLimit > intervalList.length\">Next <i class=\"fa fa-angle-double-right\"></i></button>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</div>\n\n<div class=\"modal fade\" id=\"deleteConfirmDialog\" data-backdrop=\"static\" data-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"deleteConfirmDialogLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title text-danger\" id=\"deleteConfirmDialogLabel\">\n                    <i class=\"fa fa-warning\"></i>\n                    Warning\n                </h5>  \n            </div>\n            <div class=\"modal-body\">\n                Associated actions will also be deleted and the data will be permanently erased!!! Are you sure to execute delete operation？\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteIntervals()\">Confirm</button>\n            </div>\n        </div>\n    </div>\n</div>\n    \n    ","/*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * \n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { SchedulerService } from '../../../services/scheduler.service';\nimport { MessageService } from '../../../message/message.service';\nimport { ErrorService } from '../../../services/error.service';\nimport { Address } from '../../../contracts/v2/address';\n\nimport { IntervalAction } from '../../../contracts/v2/interval-action';\nimport { Interval } from '../../../contracts/v2/interval';\nimport { CoreCommand } from '../../../contracts/v2/core-command';\nimport flatpickr from 'flatpickr';\n\n@Component({\n  selector: 'app-add-interval-action',\n  templateUrl: './add-interval-action.component.html',\n  styleUrls: ['./add-interval-action.component.css']\n})\nexport class AddIntervalActionComponent implements OnInit {\n\n  intervalAction: IntervalAction;\n  addressEmailRecipients: string = \"\";\n  templateSelected: string = \"coredata\";\n  coredataRequestParameter = '';\n  calendarStart: any;\n\n  coredataSvcAvailableAPI: string[] = [\n    \"/api/v2/event/age/\"\n  ];\n\n  constructor(private schedulerSvc:SchedulerService, \n    private msgSvc: MessageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private errSvc: ErrorService) { \n      this.intervalAction = {} as IntervalAction;\n      this.intervalAction.address = {} as Address;\n      this.intervalAction.address.type = 'REST';\n      this.intervalAction.address.httpMethod = 'GET';\n      this.intervalAction.address.retained = false;\n      this.intervalAction.address.autoReconnect = true;\n    }\n\n  ngOnInit(): void {\n    this.renderPopoverComponent();\n    this.renderCoredataDefaultTemplate();\n  }\n\n  initDatePickr() {\n    let that = this;\n    this.calendarStart = flatpickr(\"input[name='coredataRequestParameter']\", {\n      dateFormat: \"YmdTHiS\",\n      enableTime: true,\n      enableSeconds: true,\n      time_24hr: true,\n      allowInput: false,\n      onChange: function(selectedDates, dateStr, instance) {\n          that.intervalAction.address.path = that.coredataSvcAvailableAPI[0] + dateStr;\n      },\n    });\n  }\n\n  renderPopoverComponent() {\n    $('[data-toggle=\"popover\"]').popover({\n      trigger: 'hover'\n    });\n  }\n\n  renderCoredataDefaultTemplate() {\n    this.intervalAction.address.httpMethod = 'DELETE';\n    this.intervalAction.address.host = 'edgex-core-data';\n    this.intervalAction.address.port = 48080;\n    this.intervalAction.address.path = this.coredataSvcAvailableAPI[0];\n    setTimeout(() => {\n      this.renderPopoverComponent();\n      this.initDatePickr();\n    }, 300);\n  }\n\n  templateToggle(template: string) {\n    this.templateSelected = template;\n    switch (this.templateSelected) {\n      case 'coredata':\n        this.renderCoredataDefaultTemplate();\n        break;\n      case 'command':\n        this.intervalAction.address.httpMethod = '';\n        this.intervalAction.address.host = 'edgex-core-command';\n        this.intervalAction.address.port = 48082;\n        this.intervalAction.address.path = '';\n        this.intervalAction.address.httpMethod = '';\n        setTimeout(() => {\n          this.renderPopoverComponent();\n        }, 300); \n        break;\n      case 'custom':\n        setTimeout(() => {\n          this.renderPopoverComponent();\n        }, 300); \n        this.intervalAction.address = {} as Address;\n        this.intervalAction.address.type = 'REST';\n        this.intervalAction.address.httpMethod = 'GET';\n        this.intervalAction.address.retained = false;\n        this.intervalAction.address.autoReconnect = true;\n    }\n  }\n\n  typeToggle(type: string) {\n    this.intervalAction.address.type = type;\n    if (type === 'REST') {\n      this.templateToggle('coredata');\n    }\n  }\n\n  onCmdMethodSelected(method: string) {\n    this.intervalAction.address.httpMethod = method;\n  }\n\n  onCommandSelected(cmd: CoreCommand) {\n    this.intervalAction.address.path = cmd.path;\n  }\n\n  onSingleIntervalSelected(interval: Interval) {\n    this.intervalAction.intervalName = interval.name;\n  }\n\n  isPureIntegerType(value: any): boolean {\n    if (!isNaN(value) && (parseFloat(value) === parseInt(value))) {\n      return true\n    }\n    return false\n  }\n\n  validate(): boolean {\n    let result = true;\n    let basic =  this.intervalAction.name && this.intervalAction.intervalName; \n    switch (this.intervalAction.address.type) {\n      case 'REST':\n        if (basic && this.intervalAction.address.host && this.isPureIntegerType(this.intervalAction.address.port) &&\n          this.intervalAction.address.port && this.intervalAction.address.path && this.intervalAction.address.httpMethod) {\n            result = false\n        }\n        break\n      case 'MQTT': \n        if (basic && this.intervalAction.address.host && this.isPureIntegerType(this.intervalAction.address.port) &&\n          this.intervalAction.address.port &&\n          this.intervalAction.address.publisher &&\n          this.intervalAction.address.topic) {\n            result = false\n        }\n        break\n      case 'EMAIL':\n        if (basic) {\n          result = false\n        }\n    }\n    return result\n  }\n\n  submit() {\n    this.intervalAction.address.recipients = this.addressEmailRecipients.split(',');\n    this.intervalAction.address.port = Number(this.intervalAction.address.port);\n    this.schedulerSvc.addIntervalAction(this.intervalAction).subscribe(() => {\n      this.msgSvc.success('Add interval action',`name: ${this.intervalAction.name}`);\n      this.router.navigate(['../interval-action-list'],{ relativeTo: this.route });\n    })\n  }\n}\n","<!--\n*******************************************************************************\n * Copyright © 2021-2022 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n * @author: Huaqiao Zhang, <huaqiaoz@vmware.com>\n *******************************************************************************\n -->\n\n <div class=\"card mb-3\">\n     <div class=\"card-header\">\n        <i class=\"fa fa-info-circle mr-2 text-info\"></i> \n        <span>Tips</span>\n     </div>\n     <div class=\"card-body\">\n        The support scheduler micro service provide an internal EdgeX “clock” that can kick off operations in any EdgeX service. \n        At a configuration specified time (called an interval), the service calls on any EdgeX service API URL via REST to trigger an operation (called an interval action). \n        For example, the scheduling service periodically calls on core data APIs to clean up old sensed events that have been successfully exported out of EdgeX.\n        <br> Users also can call the API of command service to collect one device's data automatically. \n     </div>\n </div>\n\n <div class=\"card\">\n    <div class=\"card-header\">\n        <i class=\"fa fa-plus text-danger\"></i>\n        Add Interval Action\n        <button class=\"btn btn-sm btn-success float-right\" (click)=\"submit()\" [disabled]=\"validate()\">Submit</button>\n    </div>\n    <div class=\"card-body\">\n        <form>\n            <div class=\"form-group row has-validation\">\n                <label for=\"intervalActionName\" class=\"col-md-2 col-form-label\" required>Name</label>\n                <div class=\"col-md-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"validationIntervalActionName\" [class.is-invalid]=\"!intervalAction.name\" [class.is-valid]=\"intervalAction.name\" name=\"intervalActionName\" [(ngModel)]=\"intervalAction.name\" required>\n                    <div id=\"validationIntervalActionNameFeedback\" class=\"invalid-feedback\">\n                        <small>the interval action name can't be empty!</small> \n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"intervalName\" class=\"col-md-2 col-form-label\">IntervalName</label>\n                <div class=\"col-md-10\">\n                    <div class=\"mb-3\">\n                        <app-interval-combo-list [validate]=\"true\" (intervalSelectedEvent)=\"onSingleIntervalSelected($event)\"></app-interval-combo-list>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"Address\" class=\"col-md-2 col-form-label\">Address</label>\n                <div class=\"col-md-10\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <div class=\"form-check form-check-inline\">\n                                <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== 'REST'\" [class.badge-primary]=\"intervalAction.address.type === 'REST'\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"REST\" value=\"REST\" [(ngModel)]=\"intervalAction.address.type\" (click)=\"typeToggle('REST')\">\n                                    <label class=\"form-check-label\" for=\"REST\">REST</label>\n                                </span>\n                            </div>\n                            <div class=\"form-check form-check-inline\">\n                                <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== 'MQTT'\" [class.badge-primary]=\"intervalAction.address.type === 'MQTT'\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"MQTT\" value=\"MQTT\" [(ngModel)]=\"intervalAction.address.type\" (click)=\"typeToggle('MQTT')\">\n                                    <label class=\"form-check-label\" for=\"MQTT\">MQTT</label>\n                                </span>\n                            </div>\n                            <div class=\"form-check form-check-inline\">\n                                <span class=\"badge\" [class.badge-secondary]=\"intervalAction.address.type !== 'EMAIL'\" [class.badge-primary]=\"intervalAction.address.type === 'EMAIL'\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"EMAIL\" value=\"EMAIL\" [(ngModel)]=\"intervalAction.address.type\" (click)=\"typeToggle('EMAIL')\">\n                                    <label class=\"form-check-label\" for=\"EMAIL\">EMAIL</label>\n                                </span>\n                            </div>\n                            <!-- <ul class=\"nav nav-tabs card-header-tabs\">\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'REST'\" role=\"button\" (click)=\"typeToggle('REST')\">REST</a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'MQTT'\" role=\"button\" (click)=\"typeToggle('MQTT')\">MQTT</a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" [class.active]=\"intervalAction.address?.type === 'EMAIL'\" role=\"button\" (click)=\"typeToggle('EMAIL')\">EMAIL</a>\n                                </li>\n                            </ul> -->\n                        </div>\n                        <div *ngIf=\"intervalAction.address.type === 'REST'\" class=\"card-header\">\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== 'coredata'\" [class.badge-primary]=\"templateSelected === 'coredata'\" (click)=\"templateToggle('coredata')\">CoreDataSeviceTemplate</span>\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== 'command'\" [class.badge-primary]=\"templateSelected === 'command'\" (click)=\"templateToggle('command')\">CommandServiceTemplate</span>\n                            <span class=\"badge mr-2\" role=\"button\" [class.badge-secondary]=\"templateSelected !== 'custom'\" [class.badge-primary]=\"templateSelected === 'custom'\" (click)=\"templateToggle('custom')\">CustomTemplate</span>\n                        </div>\n                        <div class=\"card-body\">\n                            <div *ngIf=\"intervalAction.address.type === 'REST'\" #REST>\n                                <div [ngSwitch]=\"templateSelected\">\n                                    <ng-template [ngSwitchCase]=\"'custom'\" #customTemplate>\n                                        <form>\n                                            <div class=\"form-group row\">\n                                                <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>HttpMethod</label>\n                                                <div class=\"col-md-10\">\n                                                    <select type=\"text\" class=\"form-control\" name=\"httpMethod\" [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                        <option value=\"GET\">GET</option>\n                                                        <option value=\"POST\">POST</option>\n                                                        <option value=\"PUT\">PUT</option>\n                                                        <option value=\"DELETE\">DELETE</option>\n                                                        <option value=\"PATCH\">PATCH</option>\n                                                        <option value=\"HEAD\">HEAD</option>\n                                                        <option value=\"TRACE\">TRACE</option>\n                                                        <option value=\"CONNECT\">CONNECT</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>Host</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                    <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address host can't be empty!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                    <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>Path</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressPath\" name=\"addressPath\" [(ngModel)]=\"intervalAction.address.path\">\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>RequestBody</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\">\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>\n                                                    <span class=\"mr-2\">ContentType</span>\n                                                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                     data-content=\"Indicates which request contentType should be used (i.e. text/html, application/json), the default is application/json if not setup\"></span>\n                                                </label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"contentType\" name=\"contentType\" [(ngModel)]=\"intervalAction.address.contentType\">\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </ng-template>\n                                    <ng-template [ngSwitchCase]=\"'coredata'\" #coredataTemplate>\n                                        <form>\n                                            <div class=\"form-group row\">\n                                                <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>HttpMethod</label>\n                                                <div class=\"col-md-10\">\n                                                    <select type=\"text\" class=\"form-control\" name=\"httpMethod\" [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                        <option value=\"DELETE\">DELETE</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>\n                                                    <span class=\"mr-2\">Host</span>\n                                                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                     data-content=\"Both Host and Port fields are editable if you have a different host address !\"></span>\n                                                </label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                    <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address host can't be empty!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                    <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>\n                                                    <span class=\"mr-2\">Path</span>\n                                                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                    data-content=\"Remove all old events (and associated readings) based on delimiting age, the parameters delimiting age will be filled up automatically when requestBody selected!\"></span>\n                                                </label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressPath\" name=\"addressPath\" [(ngModel)]=\"intervalAction.address.path\" disabled>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>Parameter</label>\n                                                <div class=\"col-md-10\">\n                                                    <div class=\"input-group\">\n                                                        <div class=\"input-group-prepend\">\n                                                            <span class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></span>\n                                                        </div>\n                                                        <input type=\"text\" class=\"form-control\" name=\"coredataRequestParameter\" [(ngModel)]=\"coredataRequestParameter\">\n                                                    </div>\n                                                    <!-- <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\"> -->\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </ng-template>\n                                    <ng-template [ngSwitchCase]=\"'command'\" #commandTemplate>\n                                        <form>\n                                            <div class=\"form-group row\">\n                                                <label for=\"HttpMethod\" class=\"col-md-2 col-form-label\" required>\n                                                     <span class=\"mr-2\">HttpMethod</span>\n                                                     <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                     data-content=\"httpMethod field will be filled up automatically when the path field is selected! \"></span>\n                                                </label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\"  name=\"httpMethod\" disabled [(ngModel)]=\"intervalAction.address.httpMethod\" required>\n                                                    <!-- <select type=\"text\" class=\"form-control\" name=\"httpMethod\" disabled [(ngModel)]=\"intervalAction.address.httpMethod\">\n                                                        <option value=\"GET\">GET</option>\n                                                        <option value=\"PUT\">PUT</option>\n                                                    </select> -->\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressHostREST\" class=\"col-md-2 col-form-label\" required>\n                                                    <span class=\"mr-2\">Host</span>\n                                                    <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"tips\" \n                                                     data-content=\"Both Host and Port fields are editable if you have a different host address !\"></span>\n                                                </label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressHostREST\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                                    <div id=\"addressHostRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address host can't be empty!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row has-validation\">\n                                                <label for=\"addressPortREST\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"addressPortREST\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                                    <div id=\"addressPortRESTFeedback\" class=\"invalid-feedback\">\n                                                        <small>the REST address port can't be empty and only pure integer is supported!</small> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"addressPath\" class=\"col-md-2 col-form-label\" required>Path</label>\n                                                <div class=\"col-md-10\">\n                                                    <app-device-core-command-combo-list [validate]=\"true\" (cmdMethodEvent)=\"onCmdMethodSelected($event)\" (commandSelectedEvent)=\"onCommandSelected($event)\"></app-device-core-command-combo-list>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <label for=\"requestBody\" class=\"col-md-2 col-form-label\" required>RequestBody</label>\n                                                <div class=\"col-md-10\">\n                                                    <input type=\"text\" class=\"form-control\" id=\"requestBody\" name=\"requestBody\" [(ngModel)]=\"intervalAction.address.requestBody\">\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </ng-template>\n                                </div>\n                            </div>\n                            <div [style.display]=\"intervalAction.address.type !== 'MQTT' ? 'none' : ''\" #MQTT>\n                                <form>\n                                    <div class=\"form-group row has-validation\">\n                                        <label for=\"addressHostMQTT\" class=\"col-md-2 col-form-label\" required>Host</label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"addressHostMQTT\" [class.is-invalid]=\"!intervalAction.address.host\" [class.is-valid]=\"intervalAction.address.host\" name=\"addressHost\" [(ngModel)]=\"intervalAction.address.host\" required>\n                                            <div id=\"addressHostMQTTFeedback\" class=\"invalid-feedback\">\n                                                <small>the MQTT host can't be empty!</small> \n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row has-validation\">\n                                        <label for=\"addressPortMQTT\" class=\"col-md-2 col-form-label\" required>Port</label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"addressPortMQTT\" [class.is-invalid]=\"!isPureIntegerType(intervalAction.address.port)\" [class.is-valid]=\"isPureIntegerType(intervalAction.address.port)\" name=\"addressPort\" [(ngModel)]=\"intervalAction.address.port\" required>\n                                            <div id=\"addressPortMQTTFeedback\" class=\"invalid-feedback\">\n                                                <small>the MQTT port can't be empty and only pure integer is supported!!</small> \n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row has-validation\">\n                                        <label for=\"addressPublisher\" class=\"col-md-2 col-form-label\" required>Publisher</label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"addressPublisher\" [class.is-invalid]=\"!intervalAction.address.publisher\" [class.is-valid]=\"intervalAction.address.publisher\" name=\"addressPublisher\" [(ngModel)]=\"intervalAction.address.publisher\" required>\n                                            <div id=\"addressPublisherFeedback\" class=\"invalid-feedback\">\n                                                <small>the MQTT publisher can't be empty!</small> \n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row has-validation\">\n                                        <label for=\"addressTopic\" class=\"col-md-2 col-form-label\" required>Topic</label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"addressTopic\" [class.is-invalid]=\"!intervalAction.address.topic\" [class.is-valid]=\"intervalAction.address.topic\" name=\"addressTopic\" [(ngModel)]=\"intervalAction.address.topic\" required>\n                                            <div id=\"addressTopicFeedback\" class=\"invalid-feedback\">\n                                                <small>the MQTT topic can't be empty!</small> \n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row\">\n                                        <label for=\"addressQoS\" class=\"col-md-2 col-form-label\">\n                                            <span class=\"mr-2\">QoS</span>\n                                            <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                                            data-content=\"only pure integer supported!\"></span>\n                                        </label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"number\" class=\"form-control\" id=\"addressQoS\" name=\"addressQoS\" [(ngModel)]=\"intervalAction.address.qos\">\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row\">\n                                        <label for=\"addressKeepAlive\" class=\"col-md-2 col-form-label\">\n                                            <span class=\"mr-2\">KeepAlive</span>\n                                            <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                                            data-content=\"only pure integer supported!\"></span>\n                                        </label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"number\" class=\"form-control\" id=\"addressKeepAlive\" name=\"addressKeepAlive\" [(ngModel)]=\"intervalAction.address.keepAlive\">\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row\">\n                                        <label for=\"addressRetained\" class=\"col-md-2 col-form-label\" required>Retained</label>\n                                        <div class=\"col-md-10\">\n                                            <select type=\"text\" class=\"form-control\" id=\"addressRetained\" name=\"addressRetained\" [(ngModel)]=\"intervalAction.address.retained\">\n                                                <option [ngValue]=\"false\">false</option>\n                                                <option [ngValue]=\"true\">true</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row\">\n                                        <label for=\"addressAutoReconnect\" class=\"col-md-2 col-form-label\" required>AutoReconnect</label>\n                                        <div class=\"col-md-10\">\n                                            <select type=\"text\" class=\"form-control\" id=\"addressAutoReconnect\" name=\"addressAutoReconnect\" [(ngModel)]=\"intervalAction.address.autoReconnect\">\n                                                <option [ngValue]=\"true\">true</option>\n                                                <option [ngValue]=\"false\">false</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group row\">\n                                        <label for=\"addressConnectTimeout\" class=\"col-md-2 col-form-label\" required>\n                                            <span class=\"mr-2\">ConnectTimeout</span> \n                                            <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                                            data-content=\"only pure integer supported!\"></span>\n                                        </label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"number\" class=\"form-control\" id=\"addressConnectTimeout\" name=\"addressConnectTimeout\" [(ngModel)]=\"intervalAction.address.connectTimeout\">\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                            <div [style.display]=\"intervalAction.address?.type !== 'EMAIL' ? 'none' : ''\" #EMAIL>\n                                <form>\n                                    <div class=\"form-group row\">\n                                        <label for=\"emailRecipients\" class=\"col-md-2 col-form-label\">\n                                            <span class=\"mr-2\">EmailRecipients</span>\n                                            <span class=\"fa fa-question-circle-o fa-lg\" role=\"button\" data-html=\"false\" data-animation=\"true\"  data-trigger=\"focus\" data-toggle=\"popover\" title=\"format tips\" \n                                            data-content=\"Multiple email addresses are separated by commas\"></span>\n                                        </label>\n                                        <div class=\"col-md-10\">\n                                            <input type=\"text\" class=\"form-control\" id=\"emailRecipients\" name=\"emailRecipients\" [(ngModel)]=\"addressEmailRecipients\">\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>"],"sourceRoot":"webpack:///"}